---
interface Props {
    class?: string;
}

const { class: className = '' } = Astro.props;
---

<div class={`search-container ${className}`}>
    <form class="search-form flex items-center gap-2" role="search">
        <div class="relative flex-1">
            <input
                type="search"
                id="search-input"
                placeholder="Buscar en el blog..."
                class="w-full px-4 py-2 pr-10 text-sm border border-main/20 rounded-lg bg-main text-main placeholder-main/60 focus:ring-2 focus:ring-accent focus:border-accent outline-none transition-colors"
                autocomplete="off"
            />
            <svg class="absolute right-3 top-1/2 transform -translate-y-1/2 w-4 h-4 text-main/60" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path>
            </svg>
        </div>
    </form>

    <!-- Resultados de búsqueda -->
    <div
        id="search-results"
        class="search-results hidden absolute z-50 w-full mt-1 bg-main border border-main/20 rounded-lg shadow-xl max-h-96 overflow-y-auto"
    >
        <div id="search-loading" class="hidden p-4 text-center text-main/60">
            <div class="flex items-center justify-center gap-2">
                <div class="w-4 h-4 border-2 border-main/30 border-t-main/60 rounded-full animate-spin"></div>
                Buscando...
            </div>
        </div>
        <div id="search-content">
            <!-- Los resultados se mostrarán aquí -->
        </div>
        <div id="no-results" class="hidden p-4 text-center text-main/60">No se encontraron resultados</div>
    </div>
</div>

<style>
    .search-container {
        position: relative;
    }

    .search-results {
        min-width: 300px;
    }

    /* Forzar cursor pointer en todos los elementos de resultado */
    .search-result-item,
    .search-result-item *,
    .search-result-item:hover,
    .search-result-item:hover * {
        cursor: pointer !important;
    }

    .search-result-item {
        padding: 0.75rem;
        border-bottom: 1px solid var(--border-main, #171717);
        border-bottom-color: rgba(var(--text-main, 23 23 23) / 0.1);
        cursor: pointer !important;
        transition: background-color 0.2s ease;
        user-select: none;
    }

    .search-result-item:hover {
        background-color: rgba(var(--text-main, 23 23 23) / 0.05);
        cursor: pointer !important;
    }

    .search-result-item:last-child {
        border-bottom: none;
    }

    .search-result-title {
        font-weight: 500;
        color: var(--text-main, #171717);
        margin-bottom: 0.25rem;
        font-size: 0.875rem;
        cursor: pointer !important;
        pointer-events: none;
    }

    .search-result-excerpt {
        font-size: 0.75rem;
        color: rgba(var(--text-main, 23 23 23) / 0.7);
        display: -webkit-box;
        -webkit-line-clamp: 2;
        -webkit-box-orient: vertical;
        overflow: hidden;
        cursor: pointer !important;
        pointer-events: none;
    }

    .search-result-date {
        font-size: 0.75rem;
        color: rgba(var(--text-main, 23 23 23) / 0.5);
        margin-top: 0.25rem;
        cursor: pointer !important;
        pointer-events: none;
    }

    .search-more-results {
        padding: 0.75rem;
        text-align: center;
        border-top: 1px solid rgba(var(--text-main, 23 23 23) / 0.1);
    }

    .search-more-link {
        color: var(--text-accent, #3b82f6);
        font-size: 0.875rem;
        text-decoration: none;
        cursor: pointer !important;
    }

    .search-more-link:hover {
        text-decoration: underline;
        cursor: pointer !important;
    }

    .search-highlight {
        background-color: rgba(255, 255, 0, 0.3);
        color: var(--text-main, #171717);
        padding: 0.125rem 0.25rem;
        border-radius: 0.25rem;
    }
</style>

<script>
    class BlogSearch {
        private searchInput: HTMLInputElement;
        private searchResults: HTMLElement;
        private searchContent: HTMLElement;
        private searchLoading: HTMLElement;
        private noResults: HTMLElement;
        private allPosts: any[] = [];
        private debounceTimer: number | null = null;

        constructor() {
            this.searchInput = document.getElementById('search-input') as HTMLInputElement;
            this.searchResults = document.getElementById('search-results') as HTMLElement;
            this.searchContent = document.getElementById('search-content') as HTMLElement;
            this.searchLoading = document.getElementById('search-loading') as HTMLElement;
            this.noResults = document.getElementById('no-results') as HTMLElement;

            this.init();
        }

        async init() {
            await this.loadPosts();
            this.setupEventListeners();
        }

        async loadPosts() {
            try {
                // Cargar todos los posts del blog
                const response = await fetch('/search-data.json');
                this.allPosts = await response.json();
            } catch (error) {
                console.error('Error loading posts:', error);
            }
        }

        setupEventListeners() {
            this.searchInput.addEventListener('input', (e) => {
                const query = (e.target as HTMLInputElement).value.trim();

                if (this.debounceTimer) {
                    clearTimeout(this.debounceTimer);
                }

                this.debounceTimer = window.setTimeout(() => {
                    if (query.length >= 2) {
                        this.performSearch(query);
                    } else {
                        this.hideResults();
                    }
                }, 300);
            });

            // Cerrar resultados al hacer click fuera
            document.addEventListener('click', (e) => {
                if (!this.searchResults.contains(e.target as Node) && !this.searchInput.contains(e.target as Node)) {
                    this.hideResults();
                }
            });

            // Manejar teclas
            this.searchInput.addEventListener('keydown', (e) => {
                if (e.key === 'Escape') {
                    this.hideResults();
                    this.searchInput.blur();
                } else if (e.key === 'Enter') {
                    e.preventDefault();
                    const query = this.searchInput.value.trim();
                    if (query.length >= 2) {
                        // Navegar a la página de búsqueda completa
                        window.location.href = `/search?q=${encodeURIComponent(query)}`;
                    }
                }
            });
        }

        performSearch(query: string) {
            this.showLoading();

            const searchTerms = query
                .toLowerCase()
                .split(' ')
                .filter((term) => term.length > 0);
            const results = this.allPosts.filter((post) => {
                const searchText = `${post.title} ${post.description} ${post.content}`.toLowerCase();
                return searchTerms.every((term) => searchText.includes(term));
            });

            this.displayResults(results, query);
        }

        showLoading() {
            this.searchResults.classList.remove('hidden');
            this.searchLoading.classList.remove('hidden');
            this.searchContent.classList.add('hidden');
            this.noResults.classList.add('hidden');
        }

        displayResults(results: any[], query: string) {
            this.searchLoading.classList.add('hidden');

            if (results.length === 0) {
                this.searchContent.classList.add('hidden');
                this.noResults.classList.remove('hidden');
                return;
            }

            this.noResults.classList.add('hidden');
            this.searchContent.classList.remove('hidden');

            // Mostrar solo los primeros 5 resultados en el dropdown
            const displayResults = results.slice(0, 5);

            this.searchContent.innerHTML =
                displayResults
                    .map(
                        (post, index) => `
                <div class="search-result-item" style="cursor: pointer !important;" data-url="${post.url}" data-index="${index}">
                    <div class="search-result-title" style="cursor: pointer !important; pointer-events: none;">${this.highlightText(post.title, query)}</div>
                    <div class="search-result-excerpt" style="cursor: pointer !important; pointer-events: none;">${this.highlightText(this.truncateText(post.description || post.content, 100), query)}</div>
                    <div class="search-result-date" style="cursor: pointer !important; pointer-events: none;">${new Date(post.publishDate).toLocaleDateString('es-ES')}</div>
                </div>
            `
                    )
                    .join('') +
                (results.length > 5
                    ? `
                <div class="search-more-results">
                    <a href="/search?q=${encodeURIComponent(query)}" class="search-more-link" style="cursor: pointer !important;">
                        Ver todos los resultados (${results.length})
                    </a>
                </div>
            `
                    : '');

            // Añadir event listeners a los elementos de resultado
            this.addResultEventListeners();
        }

        addResultEventListeners() {
            const resultItems = this.searchContent.querySelectorAll('.search-result-item');
            resultItems.forEach((item) => {
                const htmlItem = item as HTMLElement;
                const url = htmlItem.getAttribute('data-url');
                if (url) {
                    htmlItem.addEventListener('click', () => {
                        window.location.href = url;
                    });

                    // Asegurar que el cursor se vea como pointer
                    htmlItem.style.cursor = 'pointer';
                }
            });
        }

        highlightText(text: string, query: string): string {
            if (!query) return text;

            const searchTerms = query
                .toLowerCase()
                .split(' ')
                .filter((term) => term.length > 0);
            let highlightedText = text;

            searchTerms.forEach((term) => {
                const regex = new RegExp(`(${term})`, 'gi');
                highlightedText = highlightedText.replace(regex, '<mark class="search-highlight">$1</mark>');
            });

            return highlightedText;
        }

        truncateText(text: string, maxLength: number): string {
            if (text.length <= maxLength) return text;
            return text.slice(0, maxLength) + '...';
        }

        hideResults() {
            this.searchResults.classList.add('hidden');
        }
    }

    // Inicializar la búsqueda cuando se carga la página
    document.addEventListener('DOMContentLoaded', () => {
        new BlogSearch();
    });

    // Reinicializar después de navegación de Astro
    document.addEventListener('astro:after-swap', () => {
        new BlogSearch();
    });
</script>
